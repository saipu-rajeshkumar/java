import java.util.LinkedList;
import java.util.Scanner;
class Multithreading{
	int val;
	boolean value=false;
	synchronized int get(){
		if(!value)
			try{
				wait();
			}catch(Exception e){
				System.out.println(e);
			}
		System.out.println("Consumed: "+val);
			value=false;
		notify();
		return val;
	}
	synchronized void put(int val){
		if(value)
			try{
				wait();
			}catch(Exception e){
				System.out.println(e);
			}
		this.val=val;
		value=true;
		System.out.println("Produced: "+val);
			notify();
	}
}
class producer implements Runnable{
	Multithreading th;
	int n,i=1;
	producer(Multithreading th,int n){
		this.th=th;
		this.n=n;
		new Thread(this,"producer").start();
	}
	public void run(){
		while(i<=n){
			th.put(i++);
		}
	}
}
class Consumer implements Runnable{
	Multithreading th;
	int n,i=1;
	Consumer(Multithreading th,int n){
		this.th=th;
		this.n=n;
		new Thread(this,"Consummer").start();
	}
	public void run(){
		while(i<=n){
			th.get();
			i++;
		}
	}
}
public class ProducerConsumerDemo {
	public static void main(String args[]){
		Multithreading th=new Multithreading();
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the number of items to produce: ");
		int n=sc.nextInt();
		new producer(th,n);
		new Consumer(th,n);
	}
}
